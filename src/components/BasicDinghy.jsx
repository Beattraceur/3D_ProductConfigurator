/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/basicDinghy.gltf 
*/

import React from 'react';
import { useGLTF, useTexture } from '@react-three/drei';
import * as THREE from 'three';
import { useDisplayContext } from './ConfigHandler.jsx';
// A jsx representation and loader of the gltf 3d models
export default function BasicDinghy(props) {
	//Imprt of the context that holds the display settings
	const {
		boatMaterial,
		sailMaterial,
		displayLadder,
		displayPaddleOars,
		displayTeakBenches,
		displayLaserEngraving,
		displayEngineSupport,
		displayAwning,
		displayLifeJacket,
	} = useDisplayContext();
	//Texture properties for the 3d models
	const { nodes, materials } = useGLTF('../models/basicDinghy.gltf');
	const teakwoodTextureProps = useTexture({
		map: './textures/wood/Wood_024_basecolor.jpg',
		normalMap: './textures/wood/Wood_024_normal.jpg',
		roughnessMap: './textures/wood/Wood_024_roughness.jpg',
		aoMap: './textures/wood/Wood_024_ambientOcclusion.jpg',
	});
	const rubberTextureProps = useTexture({
		map: './textures/rubber/Rubber_Sole_002_basecolor.jpg',
		normalMap: './textures/rubber/Rubber_Sole_002_normal.jpg',
		roughnessMap: './textures/rubber/Rubber_Sole_002_roughness.jpg',
		aoMap: './textures/rubber/Rubber_Sole_002_ambientOcclusion.jpg',
	});
	rubberTextureProps.side = THREE.DoubleSide;
	const metalTextureProps = useTexture({
		map: './textures/metal/Metal_scratched_008_basecolor.jpg',
		normalMap: './textures/metal/Metal_scratched_008_normal.jpg',
		roughnessMap: './textures/metal/Metal_scratched_008_roughness.jpg',
		aoMap: './textures/metal/Metal_scratched_008_ambientOcclusion.jpg',
	});
	//Dynamic material properties
	const boatMaterialProps = GetBoatMaterial(boatMaterial);
	const sailMaterialProps = GetSailMaterial(sailMaterial);
	const lifeJacketMaterialProps = GetLifeJacketMaterial(displayLifeJacket);
	return (
		<group {...props} dispose={null}>
			<mesh
				geometry={nodes.Dinghy.geometry}
				material={materials.basicWood}
				scale={0.1}
				// On and of setting the visibility of the 3d model
				visible={true}
			>
				<meshStandardMaterial {...boatMaterialProps} />
			</mesh>
			<mesh
				geometry={nodes.Dinghy_Daggerboard.geometry}
				material={materials.basicWoodDagger}
				scale={0.1}
				visible={true}
			>
				<meshStandardMaterial {...boatMaterialProps} />
			</mesh>
			<mesh
				geometry={nodes.Dinghy_Pole.geometry}
				material={materials.basicWoodPole}
				scale={0.1}
				visible={true}
			>
				<meshStandardMaterial {...boatMaterialProps} />
			</mesh>
			<mesh
				geometry={nodes.Dinghy_Bench.geometry}
				material={materials.basicWoodBench}
				scale={0.1}
				visible={true}
			>
				{/* Desition with textureProps to use */}
				{displayTeakBenches ? (
					<meshStandardMaterial {...teakwoodTextureProps} />
				) : (
					<meshStandardMaterial {...boatMaterialProps} />
				)}
			</mesh>
			<mesh
				geometry={nodes.Dinghy_Rudder.geometry}
				material={materials.basicWoodRudder}
				scale={0.1}
				visible={true}
			>
				<meshStandardMaterial {...boatMaterialProps} />
			</mesh>
			<mesh
				geometry={nodes.Ladder.geometry}
				material={materials.Metal}
				rotation={[Math.PI / 2, 0.39, 0]}
				scale={[0.16, 1.203, 0.16]}
				visible={displayLadder}
			>
				<meshStandardMaterial {...metalTextureProps} />
			</mesh>
			<mesh
				geometry={nodes.LadderStep1.geometry}
				material={nodes.LadderStep1.material}
				scale={[0.331, 0.105, 0.331]}
				visible={displayLadder}
			>
				<meshStandardMaterial {...boatMaterialProps} />
			</mesh>
			<mesh
				geometry={nodes.LadderStep2.geometry}
				material={nodes.LadderStep2.material}
				scale={[0.331, 0.105, 0.331]}
				visible={displayLadder}
			>
				<meshStandardMaterial {...boatMaterialProps} />
			</mesh>
			<mesh
				geometry={nodes.EngineSupport.geometry}
				material={materials.basicWoodDagger}
				rotation={[0, 0, -0.21]}
				scale={[0.091, 0.844, 1.023]}
				visible={displayEngineSupport}
			>
				<meshStandardMaterial {...rubberTextureProps} />
			</mesh>
			<mesh
				geometry={nodes.Dinghy_Boom.geometry}
				material={materials.basicWood}
				scale={10}
				visible={true}
			>
				<meshStandardMaterial {...boatMaterialProps} />
			</mesh>
			<mesh
				geometry={nodes.Sail.geometry}
				material={nodes.Sail.material}
				rotation={[Math.PI / 2, 0, 0]}
				scale={10}
				visible={true}
			>
				<meshStandardMaterial {...sailMaterialProps} />
			</mesh>
			<mesh
				geometry={nodes.PaddleOars.geometry}
				material={nodes.PaddleOars.material}
				visible={displayPaddleOars}
			>
				<meshStandardMaterial {...metalTextureProps} />
			</mesh>
			<mesh
				geometry={nodes.Engrave.geometry}
				material={materials.Metal}
				position={[-10.822, -2.323, 0]}
				rotation={[Math.PI / 2, 0.211, -Math.PI / 2]}
				scale={0.233}
				visible={displayLaserEngraving}
			>
				<meshStandardMaterial {...metalTextureProps} />
			</mesh>
			<mesh
				geometry={nodes.Awning_mounts.geometry}
				material={nodes.Awning_mounts.material}
				visible={displayAwning}
			>
				<meshStandardMaterial {...metalTextureProps} />
			</mesh>
			<group
				position={[7.496, -0.428, 2.011]}
				rotation={[0.312, 0.35, -0.11]}
				scale={[0.212, 0.212, 0.134]}
			>
				<mesh
					geometry={nodes.meshId0_name001.geometry}
					material={materials.M_Orange_a_matte}
					visible={displayLifeJacket}
				>
					<meshStandardMaterial {...lifeJacketMaterialProps} />
				</mesh>
				<mesh
					geometry={nodes.meshId0_name001_1.geometry}
					material={materials.M_Black_a_matte}
					visible={displayLifeJacket}
				>
					<meshStandardMaterial {...lifeJacketMaterialProps} />
				</mesh>
				<mesh
					geometry={nodes.meshId0_name001_2.geometry}
					material={materials.basicWood}
					visible={displayLifeJacket}
				>
					<meshStandardMaterial {...metalTextureProps} />
				</mesh>
			</group>
			<group
				position={[6.721, 0.26, -2.277]}
				rotation={[1.575, 0.07, -2.853]}
				scale={0}
			>
				<mesh
					geometry={nodes.tarp.geometry}
					material={materials.basicWood}
					visible={true}
				>
					<meshStandardMaterial {...boatMaterialProps} />
				</mesh>
				<mesh
					geometry={nodes.tarp_1.geometry}
					material={materials.basicWood}
					visible={true}
				>
					<meshStandardMaterial {...rubberTextureProps} />
				</mesh>
			</group>
			<mesh
				geometry={nodes.Awning_rods.geometry}
				material={nodes.Awning_rods.material}
				position={[3.596, -0.635, -1.737]}
				rotation={[-0.213, -0.262, -1.558]}
				scale={1.24}
				visible={displayAwning}
			>
				<meshStandardMaterial {...metalTextureProps} />
			</mesh>
		</group>
	);
}

useGLTF.preload('../models/basicDinghy.gltf');
//Custom Material functions
function GetBoatMaterial(boatMaterial) {
	// console.log(boatMaterial);
	const TextureObject = {
		normalMap: './textures/wood/Wood_027_normal.jpg',
		roughnessMap: './textures/wood/Wood_027_roughness.jpg',
		aoMap: './textures/wood/Wood_027_ambientOcclusion.jpg',
	};
	switch (boatMaterial) {
		case 0:
			TextureObject.map = './textures/wood/Wood_027_red.jpg';
			break;
		case 1:
			TextureObject.map = './textures/wood/Wood_027_green.jpg';
			break;
		case 2:
			TextureObject.map = './textures/wood/Wood_027_blue.jpg';
			break;
		case 3:
			TextureObject.map = './textures/wood/Wood_027_yellow.jpg';
			break;
		case 4:
			TextureObject.map = './textures/wood/Wood_027_orange.jpg';
			break;
		case 5:
			TextureObject.map = './textures/wood/Wood_027_purple.jpg';
			break;
		case 6:
			TextureObject.map = './textures/wood/Wood_027_white.jpg';
			break;
		case 7:
			TextureObject.map = './textures/wood/Wood_027_brown.jpg';
			break;
		case 8:
			TextureObject.map = './textures/wood/Wood_027_black.jpg';
			break;
		default:
			TextureObject.map = './textures/wood/Wood_027_basecolor.jpg';
			break;
	}
	//individual texture tiling and wrapping
	const woodTextureProps = useTexture(TextureObject);
	woodTextureProps.map.repeat.set(2, 2);
	woodTextureProps.normalMap.repeat.set(2, 2);
	woodTextureProps.roughnessMap.repeat.set(2, 2);
	woodTextureProps.aoMap.repeat.set(2, 2);

	woodTextureProps.map.wrapS =
		woodTextureProps.map.wrapT =
		woodTextureProps.normalMap.wrapS =
		woodTextureProps.normalMap.wrapT =
		woodTextureProps.roughnessMap.wrapS =
		woodTextureProps.roughnessMap.wrapT =
		woodTextureProps.aoMap.wrapS =
		woodTextureProps.aoMap.wrapT =
			THREE.RepeatWrapping;
	return woodTextureProps;
}

function GetSailMaterial(sailMaterial) {
	const TextureObject = {
		normalMap: './textures/textile/Fabric_Tarp_001_normal.jpg',
		roughnessMap: './textures/textile/Fabric_Tarp_001_roughness.jpg',
		aoMap: './textures/textile/Fabric_Tarp_001_ambientOcclusion.jpg',
	};
	switch (sailMaterial) {
		case 0:
			TextureObject.map = './textures/textile/Fabric_Tarp_001_red.jpg';
			break;
		case 1:
			TextureObject.map = './textures/textile/Fabric_Tarp_001_green.jpg';
			break;
		case 2:
			TextureObject.map = './textures/textile/Fabric_Tarp_001_blue.jpg';
			break;
		case 3:
			TextureObject.map = './textures/textile/Fabric_Tarp_001_yellow.jpg';
			break;
		case 4:
			TextureObject.map = './textures/textile/Fabric_Tarp_001_orange.jpg';
			break;
		case 5:
			TextureObject.map = './textures/textile/Fabric_Tarp_001_purple.jpg';
			break;
		case 6:
			TextureObject.map = './textures/textile/Fabric_Tarp_001_white.jpg';
			break;
		case 7:
			TextureObject.map = './textures/textile/Fabric_Tarp_001_brown.jpg';
			break;
		case 8:
			TextureObject.map = './textures/textile/Fabric_Tarp_001_black.jpg';
			break;
		default:
			TextureObject.map = './textures/textile/Fabric_Silk_001_basecolor.jpg';
			TextureObject.normalMap = './textures/textile/Fabric_Silk_001_normal.jpg';
			TextureObject.roughnessMap =
				'./textures/textile/Fabric_Silk_001_roughness.jpg';
			TextureObject.aoMap =
				'./textures/textile/Fabric_Silk_001_ambientOcclusion.jpg';

			break;
	}
	const sailTextureProps = useTexture(TextureObject);
	sailTextureProps.map.repeat.set(5, 5);
	sailTextureProps.normalMap.repeat.set(5, 5);
	sailTextureProps.roughnessMap.repeat.set(5, 5);
	sailTextureProps.aoMap.repeat.set(5, 5);

	sailTextureProps.map.wrapS =
		sailTextureProps.map.wrapT =
		sailTextureProps.normalMap.wrapS =
		sailTextureProps.normalMap.wrapT =
		sailTextureProps.roughnessMap.wrapS =
		sailTextureProps.roughnessMap.wrapT =
		sailTextureProps.aoMap.wrapS =
		sailTextureProps.aoMap.wrapT =
			THREE.RepeatWrapping;
	sailTextureProps.side = THREE.DoubleSide;
	return sailTextureProps;
}

function GetLifeJacketMaterial(displayLifeJacket) {
	const TextureObject = {};
	switch (displayLifeJacket) {
		case 0:
			TextureObject.map = './textures/textile/Fabric_Padded_006_basecolor.jpg';
			TextureObject.normalMap =
				'./textures/textile/Fabric_Padded_006_normal.jpg';
			TextureObject.roughnessMap =
				'./textures/textile/Fabric_Padded_006_roughness.jpg';
			TextureObject.aoMap =
				'./textures/textile/Fabric_Padded_006_ambientOcclusion.jpg';
			break;
		case 1:
			TextureObject.map = './textures/textile/Fabric_Tarp_002_basecolor.jpg';
			TextureObject.normalMap = './textures/textile/Fabric_Tarp_002_normal.jpg';
			TextureObject.roughnessMap =
				'./textures/textile/Fabric_Tarp_002_roughness.jpg';
			TextureObject.aoMap =
				'./textures/textile/Fabric_Tarp_002_ambientOcclusion.jpg';
			break;
		default:
			break;
	}
	const TextureProps = useTexture(TextureObject);

	return TextureProps;
}
